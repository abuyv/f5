###
# POST preservation feature
# for Virtual Server with Multidomain SSO configured
#
# require : APM
###

###
# Special notes
# To support POST preservation in v11 and v12,
# the administrator needs to configure special session variable assignment before the Allow ending in a Access policy
# session.server.body = Session Variable session.server.initial_req_body
# session.policy.result.redirect.url = Session Variable session.server.landinguri_base64
###

###
# Release notes
#
# 2017/11/23
# * Basic support for POST preservation in v13
# * Add support for v11 and v12 environments
#
# 2017/11/24
# * Replace static::idp_host by [PROFILE::access primary_auth_service]
# * Add a static var to enable or disable the dummy form designed for testing purposes
# * Avoid POSTing real body multiple times. A dummy var is used to retrieve the original POST content
#
# 2017/11/25
# * Remove some coding errors
# * Refactoring of some parts of the irule
# * Remove unecessary checks on the SP hostname
###

when RULE_INIT {
    set static::md_start_uri "/F5Networks-SSO-Req?SSO_ORIG_URI="

    # for v11.x and v12.x deployment
    # set static::body_var "session.server.body"

    # for v13.x deployment
    set static::body_var "session.server.initial_req_body"

    # enable or disable autogenerated testing forms
    set static::dummy_form 1
}

when HTTP_REQUEST {
    if { ![ACCESS::session exists [HTTP::cookie MRHSession]] and !([HTTP::path] eq "/F5Networks-SSO-Resp") } {
        if { [HTTP::method] eq "POST" } {
            # save post data
            set ct [HTTP::header Content-Type]
            set uri [HTTP::uri]
            if { [URI::query $uri] != "" } {
                set uri $uri&ct=[URI::encode $ct]&f5-mdsso-post=1
            } else {
                set uri $uri?ct=[URI::encode $ct]&f5-mdsso-post=1
            }
            HTTP::respond 307 noserver Location "[PROFILE::access primary_auth_service]$static::md_start_uri[URI::encode [b64encode https://[HTTP::host]$uri]]" Connection Close
            return
        } else {
            HTTP::respond 302 noserver Location "[PROFILE::access primary_auth_service]$static::md_start_uri[URI::encode [b64encode https://[HTTP::host][HTTP::uri]]]" Connection Close
            return
        }
    }

    if { [ACCESS::session exists [HTTP::cookie MRHSession]] and [HTTP::query] contains "f5-mdsso-post=1" and [ACCESS::session data get $static::body_var] != "" } {
        set ct [URI::decode [URI::query [HTTP::uri] ct]]
        set dummy [getfield [expr {rand()}] "." 2]
        ACCESS::session data set session.server.dummy $dummy
        ACCESS::session data set session.server.ct $ct
        HTTP::respond 200 content "<html><head><title></title></head><body onload=\"document.autosubmit.submit();\"> this page is used to hold your data while you are being authorized for your request.<br><br> you will be forwarded to continue the authorization process. if this does not happen automatically, please click the continue button below. <form name=\"autosubmit\" method=\"post\" action=\"[HTTP::path]\"> <input name=\"dummy\" type=\"hidden\" value=\"$dummy\"> <input type=\"submit\" value=\"continue\"> </form></body></html>" noserver Content-Type "text/html"
        return
    }

    if { [ACCESS::session exists [HTTP::cookie MRHSession]] and [HTTP::method] eq "POST" and [HTTP::payload] contains "dummy" and [ACCESS::session data get session.server.dummy] eq [URI::query "/?[HTTP::payload]" dummy] } {
        HTTP::header replace Content-Type [ACCESS::session data get session.server.ct]
        HTTP::payload replace 0 [HTTP::header Content-Length] [ACCESS::session data get $static::body_var]
    }
}
